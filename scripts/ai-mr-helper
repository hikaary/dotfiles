#!/usr/bin/env python3
import json
import os
import subprocess
import urllib.error
import urllib.request


def notify(title, message):
    subprocess.run(['notify-send', title, message])


def set_clipboard_text(text):
    process = subprocess.Popen(['wl-copy'], stdin=subprocess.PIPE)
    process.communicate(input=text.encode('utf-8'))


def send_openrouter_request(api_key, prompt):
    url = 'https://openrouter.ai/api/v1/chat/completions'
    data = {
        'model': 'google/gemini-2.0-flash-001',
        'messages': [{'role': 'user', 'content': prompt}],
    }
    data_json = json.dumps(data).encode('utf-8')
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {api_key}',
    }
    req = urllib.request.Request(
        url, data=data_json, headers=headers, method='POST'
    )
    try:
        with urllib.request.urlopen(req) as response:
            return json.loads(response.read().decode('utf-8'))
    except urllib.error.HTTPError as e:
        error_message = e.read().decode('utf-8')
        notify(
            'AI MR Helper', f'HTTP Error: {e.code} {e.reason}\n{error_message}'
        )
    except urllib.error.URLError as e:
        notify('AI MR Helper', f'URL Error: {e.reason}')
    return None


def main():
    api_key = os.getenv('OPENROUTER_API_KEY')
    if not api_key:
        notify('AI MR Helper', 'OPENROUTER_API_KEY не установлена.')
        return

    target_branch = input('Введите ветку, в которую делается MR: ').strip()
    if not target_branch:
        print('Целевая ветка не указана. Выход.')
        return

    try:
        current_branch = subprocess.check_output(
            ['git', 'rev-parse', '--abbrev-ref', 'HEAD'],
            encoding='utf-8',
        ).strip()
    except subprocess.CalledProcessError as e:
        notify('AI MR Helper', f'Ошибка определения текущей ветки: {e}')
        return

    try:
        diff = subprocess.check_output(
            ['git', 'diff', f'{target_branch}..{current_branch}'],
            encoding='utf-8',
        )
    except subprocess.CalledProcessError as e:
        notify('AI MR Helper', f'Ошибка получения diff: {e}')
        return

    if not diff.strip():
        notify(
            'AI MR Helper', 'Нет изменений между ветками для отображения diff.'
        )
        return

    prompt = (
        'Ниже приведён diff изменений между ветками Git.\n\n'
        'На основе данного diff составь заголовок (title) и подробное описание (description) для Merge Request. '
        'Постарайся выделить основные изменения, исправления, новые возможности или багфиксы. '
        'Заголовок должен быть кратким и информативным, а описание — подробным и понятным для разработчиков.'
        'Ответ должен быть на русском.\n\n'
        f'Diff для анализа:{diff}\n'
        'Выведи результат строго в формате:\n'
        'Title: <твой заголовок>\n\n'
        'Description: <твоё описание>\n\n'
    )

    print(
        'Diff получен. Отправляю запрос к AI для составления описания MR.',
    )

    response = send_openrouter_request(api_key, prompt)
    if not response:
        print('Ошибка получения ответа от AI.')
        return

    try:
        answer = response['choices'][0]['message']['content'].strip()
    except (KeyError, IndexError) as e:
        print(f'Ошибка обработки ответа: {e}')
        return

    print(answer)
    set_clipboard_text(answer)
    notify('AI MR Helper', 'Ответ AI скопирован в буфер обмена.')


if __name__ == '__main__':
    main()
