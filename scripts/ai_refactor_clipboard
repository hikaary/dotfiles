#!/usr/bin/env python3
import json
import os
import subprocess
import urllib.error
import urllib.request


def notify(title, message):
    subprocess.run(['notify-send', title, message])


def get_clipboard_text():
    try:
        return subprocess.check_output(['wl-paste'], encoding='utf-8')
    except subprocess.CalledProcessError:
        return ''


def set_clipboard_text(text):
    process = subprocess.Popen(['wl-copy'], stdin=subprocess.PIPE)
    process.communicate(input=text.encode('utf-8'))


def send_openrouter_request(api_key, prompt):
    url = 'https://openrouter.ai/api/v1/chat/completions'
    data = {
        'model': 'google/gemini-2.0-flash-001',
        'messages': [{'role': 'user', 'content': prompt}],
    }
    data_json = json.dumps(data).encode('utf-8')
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {api_key}',
    }
    req = urllib.request.Request(
        url, data=data_json, headers=headers, method='POST'
    )
    try:
        with urllib.request.urlopen(req) as response:
            return json.loads(response.read().decode('utf-8'))
    except urllib.error.HTTPError as e:
        error_message = e.read().decode('utf-8')
        notify(
            'AI text refactor',
            f'HTTP Error: {e.code} {e.reason}\n{error_message}',
        )
    except urllib.error.URLError as e:
        notify('AI text refactor', f'URL Error: {e.reason}')
    return None


def main():
    api_key = os.getenv('OPENROUTER_API_KEY')
    if not api_key:
        notify('AI text refactor', 'OPENROUTER_API_KEY не установлена.')
        return

    text = get_clipboard_text()
    if not text:
        notify('AI text refactor', 'Буфер обмена пуст или данные не получены.')
        return

    notify('AI text refactor', 'Текст получен. Отправляю на исправление.')
    prompt = (
        'Проанализируй этот текст, найди и исправь ошибки. '
        'В ответ отправь только сам текст, не добавляя комментариев.\n\n'
    ) + text

    response = send_openrouter_request(api_key, prompt)
    if not response:
        notify('AI text refactor', 'Ошибка получения ответа от API.')
        return

    try:
        answer = response['choices'][0]['message']['content'].strip()
    except (KeyError, IndexError) as e:
        notify('AI text refactor', f'Ошибка обработки ответа: {e}')
        return

    set_clipboard_text(answer)
    notify('AI text refactor', 'Ответ скопирован в буфер обмена.')


if __name__ == '__main__':
    main()
