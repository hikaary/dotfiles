#!/usr/bin/env python3
"""
ai_helper_ollama.py – универсальный CLI‑помощник для локальной Ollama‑инстанции (REST API http://localhost:11434).
Поддерживает три режима:

  • **mr**        – формирование Title/Description Merge Request по Git‑diff
  • **commit**    – генерация Conventional Commit‑сообщения на основе staged diff
  • **refactor**  – исправление текста из буфера обмена

Перед использованием убедитесь, что Ollama запущена (`ollama serve`) и
загружена нужная модель (по умолчанию `OLLAMA_MODEL`, например `qwen3:4b`).

Запуск:
    python ai_helper_ollama.py --mode mr
    python ai_helper_ollama.py --mode commit
    python ai_helper_ollama.py --mode refactor
"""

from __future__ import annotations

import argparse
import json
import os
import re
import subprocess
import sys
import urllib.error
import urllib.request
from typing import Optional

###############################################################################
# PROMPTS (English text; response must be in Russian)
###############################################################################

MR_PROMPT_TEMPLATE = r"""
# ROLE: You are an experienced AI assistant specialized in code analysis and Merge Request creation.
# TASK: Based on the provided Git diff, create an informative Title and a structured, detailed Description for a Merge Request. Please answer in Russian.

# INPUT (diff for analysis):
{diff}

# INSTRUCTIONS:

## 1. Title:
* **Brevity:** No more than 72 characters.
* **Clarity:** Convey the main change or purpose.
* **Format (Conventional Commits):** feat:, fix:, refactor:, perf:, docs:, test:, chore:.

## 2. Description:
* **What was done:** Brief summary and list all change types found: feat, fix, refactor, perf, docs, test, chore, style.
* **Why it was done:** Motivation or business requirement.
* **How to verify (optional):** Testing steps.
* **Additional notes (optional):** Risks, open questions.

# OUTPUT FORMAT (strict):
Title: <generated title>
Description: <generated description>
"""

COMMIT_MESSAGE_PROMPT = r"""
You are an expert in writing commit messages in Russian, strictly following Conventional Commits rules.
Create a commit message in Russian based on the provided Git diff.

INPUT:
diff:
```
{diff}
```

GENERAL RULES:
* Entirely in Russian.
* Two parts: title and detailed description, separated by an empty line.
* Follow Conventional Commits types.

1. Title:
* **Content:** High-level summary.
* **Format:** `<scope>: <description>` (scope optional).
* **Mood:** Imperative.
* **Length:** ≤ 50 characters.
* **Capitalization:** First letter uppercase, no period at end.

2. Body:
* Explain what and why, not how.
* After title with one blank line.
* May include bullet points.

Types: feat, fix, docs, style, refactor, perf, test, build, ci, chore.

OUTPUT (strict):
<Title>

<Body>
"""

REFRACTOR_PROMPT_TEMPLATE = (
    'Проанализируй этот текст, найди и исправь ошибки. '
    'Верни только исправленный текст без комментариев.\n\n{text}'
)

###############################################################################
# UTILS
###############################################################################


def remove_think(text: str) -> str:
    """Remove any <think>...</think> blocks from AI response."""
    return re.sub(r'<think>.*?</think>', '', text, flags=re.DOTALL)


def notify(title: str, message: str) -> None:
    if sys.platform == 'darwin':
        subprocess.run(
            [
                'osascript',
                '-e',
                f'display notification "{message}" with title "{title}"',
            ]
        )
    else:
        subprocess.run(
            ['notify-send', '--app-name', 'AI Helper', title, message]
        )


def get_clipboard_text() -> str:
    cmd = ['pbpaste'] if sys.platform == 'darwin' else ['wl-paste']
    try:
        return subprocess.check_output(cmd, encoding='utf-8')
    except subprocess.CalledProcessError:
        return ''


def set_clipboard_text(text: str) -> None:
    cmd = ['pbcopy'] if sys.platform == 'darwin' else ['wl-copy']
    proc = subprocess.Popen(cmd, stdin=subprocess.PIPE)
    proc.communicate(input=text.encode('utf-8'))


###############################################################################
# OLLAMA COMMUNICATION
###############################################################################


def send_request(
    prompt: str, model: Optional[str] = None, host: Optional[str] = None
) -> Optional[str]:
    model = model or os.getenv('OLLAMA_MODEL', 'qwen3:4b')
    host = host or os.getenv('OLLAMA_HOST', 'http://localhost:11434')
    url = f'{host.rstrip("/")}/api/chat'

    payload = {
        'model': model,
        'messages': [{'role': 'user', 'content': prompt}],
        'stream': False,
    }
    data = json.dumps(payload).encode('utf-8')
    headers = {'Content-Type': 'application/json'}

    req = urllib.request.Request(url, data=data, headers=headers, method='POST')
    try:
        with urllib.request.urlopen(req) as resp:
            resp_json = json.loads(resp.read().decode('utf-8'))
            return resp_json.get('message', {}).get('content', '').strip()
    except urllib.error.HTTPError as err:
        notify(
            'AI Helper (Ollama)',
            f'HTTP Error: {err.code} {err.reason}\n{err.read().decode()}',
        )
    except urllib.error.URLError as err:
        notify('AI Helper (Ollama)', f'URL Error: {err.reason}')
    return None


###############################################################################
# GIT HELPERS
###############################################################################


def git_current_branch() -> str:
    return subprocess.check_output(
        ['git', 'rev-parse', '--abbrev-ref', 'HEAD'], encoding='utf-8'
    ).strip()


def git_diff(refspec: str) -> str:
    return subprocess.check_output(['git', 'diff', refspec], encoding='utf-8')


def git_diff_cached() -> str:
    return subprocess.check_output(
        [
            'git',
            '--no-pager',
            '-c',
            'delta.enable=false',
            'diff',
            '--cached',
            '--text',
        ],
        encoding='utf-8',
    )


###############################################################################
# MODE HANDLERS
###############################################################################


def handle_mr() -> None:
    target = input('Enter target branch for MR: ').strip()
    if not target:
        print('No target branch specified. Exit.')
        sys.exit(1)

    try:
        diff = git_diff(f'{target}..{git_current_branch()}')
    except subprocess.CalledProcessError as err:
        notify('AI Helper', f'Git error: {err}')
        sys.exit(1)

    if not diff.strip():
        notify('AI Helper', 'No changes to compare.')
        sys.exit(0)

    prompt = MR_PROMPT_TEMPLATE.format(diff=diff)
    answer = send_request(prompt)
    if not answer:
        print('Failed to get a response.')
        sys.exit(1)
    answer = remove_think(answer)

    print(f'\n{answer}\n')
    set_clipboard_text(answer)
    notify('AI Helper', 'MR description copied.')


def handle_commit() -> None:
    diff = git_diff_cached()
    if not diff.strip():
        print('No staged changes.')
        sys.exit(0)

    prompt = COMMIT_MESSAGE_PROMPT.format(diff=diff)
    answer = send_request(prompt)
    if not answer:
        print('Failed to get a response.')
        sys.exit(1)
    answer = remove_think(answer)

    lines = answer.splitlines()
    title = lines[0]
    body = '\n'.join(lines[1:]).strip()
    commit_msg = f'{title}\n\n{body}' if body else title

    print(f'\n{commit_msg}\n')
    set_clipboard_text(commit_msg)
    notify('AI Helper', 'Commit message copied.')


def handle_refactor() -> None:
    text = get_clipboard_text()
    if not text:
        notify('AI Helper', 'Clipboard is empty.')
        sys.exit(1)

    prompt = REFRACTOR_PROMPT_TEMPLATE.format(text=text)
    answer = send_request(prompt)
    if not answer:
        print('Failed to get a response.')
        sys.exit(1)
    answer = remove_think(answer)

    set_clipboard_text(answer)
    notify('AI Helper', 'Refactored text copied.')


###############################################################################
# CLI
###############################################################################


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description='AI Helper (Ollama edition)')
    parser.add_argument(
        '--mode',
        choices=['mr', 'commit', 'refactor'],
        required=True,
        help='Mode: mr | commit | refactor',
    )
    return parser.parse_args()


def main() -> None:
    args = parse_args()
    if args.mode == 'mr':
        handle_mr()
    elif args.mode == 'commit':
        handle_commit()
    else:
        handle_refactor()


if __name__ == '__main__':
    main()
